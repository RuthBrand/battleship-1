# require './lib/board'

class Battleship


  def initialize
    start
  end

  def start
    main_menu

  end

  def main_menu
    input = nil
    while input != "q"
      puts "Welcome to BATTLESHIP \nEnter p to play. Enter q to quit."
      input = gets.chomp
      #input = input.upcase
      if input == "p"
        setup
      elsif input == "q"
        puts "Thanks for playing BATTLESHIP"
      else
        puts "Invalid Input"
      end
    end
  end

  def setup
    user_board = Board.new
    # computer_board = Board.new



    # computer_cruiser = Ship.new("Cruiser", 3)
    # computer_sub = Ship.new("Submarine", 2)

    #here goes the code for random but valid computer ship placement

    #I'm thinking we could make a method called something like random_computer_ship_placement, and then just call that method in this setup method. In the random_computer_ship_placement, we could split it up even more with a def random_vertical_placement method as well as a random_horizontal_placement method.

    #battleship.random_computer_ship_placement

    user_cruiser = Ship.new("Cruiser", 3)
    user_sub = Ship.new("Submarine", 2)

    input = nil
    puts "I have laid out my ships on the grid.\nYou now need to lay out your ships.\nThe Cruiser is three units long and the Submarine is two units long."
    puts user_board.render
    puts "Enter the squares for the Cruiser (3 spaces):"
    # print = ">"
    input = gets.chomp
    input = input.upcase



    input_array = input.split
    while user_board.valid_placement?(user_cruiser, input_array) == false

      puts "Those are invalid coordinates. Please try again:"
      input = gets.chomp
      input = input.upcase
      input_array = input.split
      # require 'pry'; binding.pry
    end
    user_board.place(user_cruiser, input_array)
    puts user_board.render(true)

    # This code should run after the user places the first ship.

    puts "Enter the squares for the Submarine (2 spaces):"
    input = gets.chomp
    input = input.upcase
    input_array = input.split
    user_board.place(user_sub, input_array)
    puts user_board.render(true)
  end

  #def random_computer_ship_placement
    #this assigns any random coordinate from our board to the random_coordinate_1 variable.
    # random_coordinate_1 = board.cells.keys.sample
    # random_coordinate_2 = board.cells.keys.sample
    # random_coordinate_3 = board.cells.keys.sample
    # however, we cant just get three random coordinates. We need three valid coordinates. Maybe using the validation methods we have. Not quite sure how to do this. Maybe generate 1 random coordinate and then get the second and third corrdinates by making sure they are consecutive?
    #maybe we can can check the ordinal value to see if we can place a ship(depending on the length of the ship) in four directions. up, down, left, right. for example if it can only fit up or left from the first random coordinate it generated, then we can put the up and left option into a collection (maybe possible_ship_placement_direction), call .sample on it, and then we can randomly choose the up or left placement, and place the ship.

    # def random_horizontal_placement
    #   random_coordinate = "A1" #will actually have to use board.cells.keys.sample, or maybe it has already been generated by this point?
    #   random_coordinate_letter = random_coordinate[0]
    #   random_coordinate_number = random_coordinate[1]
    #
    # end

    # def random_vertical_placement
    #   random_coordinate = board.cells.keys.sample
    #   random_coordinate_letter = random_coordinate[0]
    #   random_coordinate_number = random_coordinate[1]
    #
    # end





  #end
















end
